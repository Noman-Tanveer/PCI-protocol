`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    17:56:59 06/21/2019 
// Design Name: 
// Module Name:    PCI_Slave 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module PCI_Slave (AD, CBE, FRAME_LA, TRDY_LA, IRDY_LA, DEVSEL_LA, clk, RST_LA,
 MEM_ADRESS, MEM_DATA, RAM_EN, WRITE_EN, OUT_EN, state_s);

input clk;              //Standard PCI signals
inout [31:0] AD;
input [3:0] CBE;
//input PAR;
input FRAME_LA;
output reg OUT_EN = 1'b0;
output reg TRDY_LA = 1'b1;
input IRDY_LA;
output reg DEVSEL_LA = 1'b1;
//input IDSEL;
//input PERR_LA;
//input SERR_LA;
input RST_LA;


output reg [15:0] MEM_ADRESS;				//DPRAM Signals
output reg RAM_EN = 1'b0;
inout [31:0] MEM_DATA;
output reg WRITE_EN = 1'b0;

parameter [3:0] READ = 4'b0110;
parameter [3:0] WRITE = 4'b0111;

reg [31:0] address;
reg [3:0] command;
reg [31:0] data;
/*reg [3:0] byteselect;
reg read_reg = 1'b0;
reg DEVSEL_LA_reg = 1'b1;*/
output reg [3:0] state_s = initial_cycle;

parameter [3:0] initial_cycle = 4'b0001;
parameter [3:0] s_read_cycle = 4'b0010;
parameter [3:0] s_write_cycle = 4'b0011;
parameter [3:0] s_end_cycle = 4'b0100;

//assign AD = ((IRDY_LA==1'b0)&&(FRAME_LA==1'b0)&&(command == READ))? MEM_DATA [31:0]: 32'hZZZZ_ZZZZ;
//assign AD = ((IRDY_LA==1'b0)&&(FRAME_LA==1'b0)&&(command == READ))? MEM_DATA [31:0]: 32'hZZZZ_ZZZZ;
assign MEM_DATA = ((TRDY_LA==1'b0)&&(DEVSEL_LA==1'b0) && (WRITE_EN == 1'b1)) ? data : 32'bZ;
assign AD = ((IRDY_LA==1'b0) && (FRAME_LA==1'b0) && (command==READ) && (TRDY_LA==1'b0) ) ? MEM_DATA: 32'bZ;


always@(posedge clk or negedge RST_LA)
begin
if (RST_LA==0)
begin
TRDY_LA<=1'b1;
DEVSEL_LA<=1'b1;
RAM_EN<=1'b0;
WRITE_EN<=1'b0;
OUT_EN <= 1'b0;
MEM_ADRESS <= 16'bZ;
state_s <= initial_cycle;
end
else 
begin
state_s <= initial_cycle;

case (state_s)

initial_cycle:
	begin
		if ((FRAME_LA==1'b0) && (IRDY_LA==1'b1))
		begin
		command = CBE;
		address = AD;
			if (address<32'h0000_fffe)
			begin
			DEVSEL_LA = 1'b0;
			MEM_ADRESS <= address [15:0];
			RAM_EN <= 1'b1;
				if (command == WRITE)
				begin
				WRITE_EN <= 1'b1;
				TRDY_LA <=1'b0;
				state_s <= s_write_cycle;
				end
				else if (command == READ)
				begin
				WRITE_EN <= 1'b0;
				OUT_EN <= 1'b1;
				state_s <= s_read_cycle;
				end
				else
				state_s <= initial_cycle;
			end
			else
			state_s <= initial_cycle;
		end
		else
		state_s <= initial_cycle;
		
	end
	
s_read_cycle:
begin
	if (FRAME_LA == 1'b0)
	begin
	TRDY_LA <= 1'b0;
	data <= MEM_DATA;
	state_s <= s_end_cycle;
	end
	else
	state_s <= s_end_cycle;
end

s_write_cycle:
begin
	if (~IRDY_LA)
	begin
	data <= AD;
	state_s <= s_end_cycle;
	end
	
	else
	begin
	state_s <= s_write_cycle;
end
end

s_end_cycle:
begin
	if (FRAME_LA)
	begin
	TRDY_LA <= 1'b1;
	DEVSEL_LA <= 1'b1;
	WRITE_EN <= 1'b0;
	RAM_EN <= 1'b0;
	OUT_EN <= 1'b0;
	MEM_ADRESS <= 16'hZ;
	state_s <= initial_cycle;
	end
	else
	begin
	state_s <= s_end_cycle;
	end
end
endcase
end
end
	
endmodule
